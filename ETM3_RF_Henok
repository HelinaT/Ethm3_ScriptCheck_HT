#' randomForest predictions of nutrient mass balance variables with spatial covariates
#' EthioSIS Mehlich-3 extractable P,K,S,Ca & Mg, from 255 Woredas
#' M. Walsh, December 2015

# Required packages
# install.packages(c("devtools","caret","doParallel","randomForest","raster")), dependencies=TRUE)
require(devtools)
require(caret)
require(doParallel)
require(randomForest)
require(raster)

# Data setup --------------------------------------------------------------
# SourceURL <- "https://raw.githubusercontent.com/mgwalsh/Ethiopia/blob/master/ETM3_setup.R"
# source_url(SourceURL)

# Mehlich-3 nutrient mass balance variables
V0 <- etm3_cal$V0
V1 <- etm3_cal$V1
V2 <- etm3_cal$V2
V3 <- etm3_cal$V3
V4 <- etm3_cal$V4
V5 <- etm3_cal$V5
V6 <- etm3_cal$V6
V7 <- etm3_cal$V7
V8 <- etm3_cal$V8
V9 <- etm3_cal$V9
V10 <- etm3_cal$V10
V11 <- etm3_cal$V11

# Gridded covariates
GRIDSc <- etm3_cal[c(32:59)] ## gridded covariates for model calibration from 204 Woredas
GRIDSv <- etm3_val[c(32:59)] ## same for 51 randomly selected validation Woredas

# Random Forest models ----------------------------------------------------
# Start foreach to parallelize model fitting
mc <- makeCluster(detectCores())
registerDoParallel(mc)

# Control setup
set.seed(1385321)
tc <- trainControl(method = "oob", allowParallel = TRUE)

# V0 = ilr [P,K,S,Ca,Mg | Fv]
V0.rf <- train(GRIDSc, V0, method = "rf", preProc = c("center", "scale"), trControl = tc)

print(V0.rf)
v0.imp <- varImp(V0.rf, useModel = FALSE)
plot(v0.imp, top=28)

# V0 = ilr [P,K,S,Ca,Mg | Fv]
V1.rf <- train(GRIDSc, V1, method = "rf", preProc = c("center", "scale"), trControl = tc)

print(V1.rf)
v1.imp <- varImp(V1.rf, useModel = FALSE)
plot(v1.imp, top=28)

# V0 = ilr [P,K,S,Ca,Mg | Fv]
V2.rf <- train(GRIDSc, V2, method = "rf", preProc = c("center", "scale"), trControl = tc)

print(V2.rf)
v2.imp <- varImp(V2.rf, useModel = FALSE)
plot(v2.imp, top=28)

# V3 = ilr [P,K | K,Ca,Mg]
V3.rf <- train(GRIDSc, V3, method = "rf", preProc = c("center", "scale"), trControl = tc)
print(V3.rf) 
v3.imp <- varImp(V3.rf, useModel = FALSE)
plot(v3.imp, top=28)

# V4 = ilr [K | Ca,Mg]
V4.rf <- train(GRIDSc, V4, method = "rf", preProc = c("center", "scale"), trControl = tc)
print(V4.rf)
v4.imp <- varImp(V4.rf, useModel = FALSE)
plot(v4.imp, top=28)

# V5 = ilr [P | S]
V5.rf <- train(GRIDSc, V5, method = "rf", preProc = c("center", "scale"), trControl = tc)
print(V5.rf)
v5.imp <- varImp(V5.rf, useModel = FALSE)
plot(v5.imp, top=28)

# V6 = ilr [Ca | Mg]
V6.rf <- train(GRIDSc, V6, method = "rf", preProc = c("center", "scale"), trControl = tc)
print(V6.rf)
v6.imp <- varImp(V6.rf, useModel = FALSE)
plot(v6.imp, top=28)

# V7 = ilr [Ca | Mg]
V7.rf <- train(GRIDSc, V7, method = "rf", preProc = c("center", "scale"), trControl = tc)
print(V7.rf)
v7.imp <- varImp(V7.rf, useModel = FALSE)
plot(v7.imp, top=28)

# V7 = ilr [Ca | Mg]
V8.rf <- train(GRIDSc, V8, method = "rf", preProc = c("center", "scale"), trControl = tc)
print(V8.rf)
v8.imp <- varImp(V8.rf, useModel = FALSE)
plot(v8.imp, top=28)

# V7 = ilr [Ca | Mg]
V9.rf <- train(GRIDSc, V9, method = "rf", preProc = c("center", "scale"), trControl = tc)
print(V9.rf)
v9.imp <- varImp(V9.rf, useModel = FALSE)
plot(v9.imp, top=28)

# V7 = ilr [Ca | Mg]
V10.rf <- train(GRIDSc, V10, method = "rf", preProc = c("center", "scale"), trControl = tc)
print(V10.rf)
v10.imp <- varImp(V10.rf, useModel = FALSE)
plot(v10.imp, top=28)

# V7 = ilr [Ca | Mg]
V11.rf <- train(GRIDSc, V11, method = "rf", preProc = c("center", "scale"), trControl = tc)
print(V11.rf)
v11.imp <- varImp(V11.rf, useModel = FALSE)
plot(v11.imp, top=28)


stopCluster(mc)

# Test set predictions ----------------------------------------------------
V0_rf <- predict(V0.rf, GRIDSv)
V1_rf <- predict(V1.rf, GRIDSv)
V2_rf <- predict(V2.rf, GRIDSv)
V3_rf <- predict(V3.rf, GRIDSv)
V4_rf <- predict(V4.rf, GRIDSv)
V5_rf <- predict(V5.rf, GRIDSv)
V6_rf <- predict(V6.rf, GRIDSv)
V7_rf <- predict(V7.rf, GRIDSv)
V8_rf <- predict(V8.rf, GRIDSv)
V9_rf <- predict(V9.rf, GRIDSv)
V10_rf <- predict(V10.rf, GRIDSv)
V11_rf <- predict(V11.rf, GRIDSv)
pred <- cbind.data.frame(V0_rf,V1_rf,V2_rf,V3_rf,V4_rf,V5_rf,V6_rf,V7_rf,V8_rf,V9_rf,V10_rf,V11_rf)
test <- etm3_val[c("PID","V0","V1","V2","V3","V4","V5","V6","V7","V8","V9","V10","V11")]
rf_eval <- cbind(test, pred)

# Gridded predictions -----------------------------------------------------
V0_rf <- predict(grids, V0.rf)
V1_rf <- predict(grids, V1.rf)
V2_rf <- predict(grids, V2.rf)
V3_rf <- predict(grids, V3.rf)
V4_rf <- predict(grids, V4.rf)
V5_rf <- predict(grids, V5.rf)
V6_rf <- predict(grids, V6.rf)
V7_rf <- predict(grids, V7.rf)
V8_rf <- predict(grids, V8.rf)
V9_rf <- predict(grids, V9.rf)
V10_rf <- predict(grids, V10.rf)
V11_rf <- predict(grids, V11.rf)
rf_pred <- stack(V0_rf,V1_rf,V2_rf,V3_rf,V4_rf,V5_rf,V6_rf,V7_rf,V8_rf,V9_rf,V10_rf,V11_rf)
names(rf_pred) <- c("V0_rf","V1_rf","V2_rf","V3_rf","V4_rf","V5_rf","V6_rf","V7_rf","V8_rf","V9_rf","V10_rf","V11_rf")
plot(rf_pred)

# Export Gtif's -----------------------------------------------------------
# Create a "Results" folder in current working directory
#dir.create("ETM3_results", showWarnings=F)

# Export Gtif's to "./ETM3_results"
writeRaster(V2_rf, filename="./ETM3_results/V2_rf.tif", datatype="FLT4S", options="INTERLEAVE=BAND", overwrite=T)
